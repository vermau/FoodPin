//
// GearOptionsView.swift
// Generated by Core Animator version 1.3 on 4/15/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

protocol GearOptionsViewDelegate: class {
	func gearPressed(gear: UIButton)
	func locationPressed(location: UIButton)
	func ratingPressed(rating: UIButton)
}

@IBDesignable
class GearOptionsView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 720, height: 720))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	weak var gearOptionsViewDelegate: GearOptionsViewDelegate?

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:720, height:720)
		__scaling__.center = CGPoint(x:360.0, y:360.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let rating = UIButton(type: .Custom)
		rating.bounds = CGRect(x:0, y:0, width:180.0, height:180.0)
		var imgRating: UIImage!
		if let imagePath = bundle.pathForResource("rating.png", ofType:nil) {
			imgRating = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'rating.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		rating.setBackgroundImage(imgRating, forState:.Normal)
		rating.contentMode = .Center
		rating.layer.position = CGPoint(x:360.000, y:560.000)
        rating.addTarget(self, action:#selector(self.actionRatingPressed(_:)), forControlEvents: .TouchUpInside)
		__scaling__.addSubview(rating)
		viewsByName["rating"] = rating

		let location = UIButton(type: .Custom)
		location.bounds = CGRect(x:0, y:0, width:180.0, height:180.0)
		var imgLocation: UIImage!
		if let imagePath = bundle.pathForResource("location.png", ofType:nil) {
			imgLocation = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'location.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		location.setBackgroundImage(imgLocation, forState:.Normal)
		location.contentMode = .Center
		location.layer.position = CGPoint(x:180.000, y:360.000)
		location.addTarget(self, action:#selector(self.actionLocationPressed(_:)), forControlEvents: .TouchUpInside)
		__scaling__.addSubview(location)
		viewsByName["location"] = location

		let gear = UIButton(type: .Custom)
		gear.bounds = CGRect(x:0, y:0, width:180.0, height:180.0)
		var imgGear: UIImage!
		if let imagePath = bundle.pathForResource("gear.png", ofType:nil) {
			imgGear = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'gear.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		gear.setBackgroundImage(imgGear, forState:.Normal)
		gear.contentMode = .Center
		gear.layer.position = CGPoint(x:360.000, y:360.000)
		gear.transform = CGAffineTransformMakeRotation(6.281)
		gear.addTarget(self, action:#selector(self.actionGearPressed(_:)), forControlEvents: .TouchUpInside)
		__scaling__.addSubview(gear)
		viewsByName["gear"] = gear

		self.viewsByName = viewsByName
	}

	// - MARK: closeOptions

	func addCloseOptionsAnimation() {
		addCloseOptionsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseOptionsAnimation(completion: ((Bool) -> Void)?) {
		addCloseOptionsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseOptionsAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addCloseOptionsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseOptionsAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseOptionsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseOptionsAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.100
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "CloseOptions")
			self.animationCompletions[layer.animationForKey("CloseOptions")!] = complete
		}

		let ratingOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		ratingOpacityAnimation.duration = 0.100
		ratingOpacityAnimation.values = [1.000 as Float, 0.000 as Float]
		ratingOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		ratingOpacityAnimation.timingFunctions = [linearTiming]
		ratingOpacityAnimation.beginTime = beginTime
		ratingOpacityAnimation.fillMode = fillMode
		ratingOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["rating"]?.layer.addAnimation(ratingOpacityAnimation, forKey:"closeOptions_Opacity")

		let ratingTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		ratingTranslationYAnimation.duration = 0.100
		ratingTranslationYAnimation.values = [0.000 as Float, -200.000 as Float]
		ratingTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		ratingTranslationYAnimation.timingFunctions = [linearTiming]
		ratingTranslationYAnimation.beginTime = beginTime
		ratingTranslationYAnimation.fillMode = fillMode
		ratingTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["rating"]?.layer.addAnimation(ratingTranslationYAnimation, forKey:"closeOptions_TranslationY")

		let gearRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		gearRotationAnimation.duration = 0.100
		gearRotationAnimation.values = [4.835 as Float, 6.231 as Float]
		gearRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		gearRotationAnimation.timingFunctions = [linearTiming]
		gearRotationAnimation.beginTime = beginTime
		gearRotationAnimation.fillMode = fillMode
		gearRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["gear"]?.layer.addAnimation(gearRotationAnimation, forKey:"closeOptions_Rotation")

		let gearOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		gearOpacityAnimation.duration = 0.100
		gearOpacityAnimation.values = [0.600 as Float, 1.000 as Float]
		gearOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		gearOpacityAnimation.timingFunctions = [linearTiming]
		gearOpacityAnimation.beginTime = beginTime
		gearOpacityAnimation.fillMode = fillMode
		gearOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["gear"]?.layer.addAnimation(gearOpacityAnimation, forKey:"closeOptions_Opacity")

		let locationOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		locationOpacityAnimation.duration = 0.100
		locationOpacityAnimation.values = [1.000 as Float, 0.000 as Float]
		locationOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationOpacityAnimation.timingFunctions = [linearTiming]
		locationOpacityAnimation.beginTime = beginTime
		locationOpacityAnimation.fillMode = fillMode
		locationOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["location"]?.layer.addAnimation(locationOpacityAnimation, forKey:"closeOptions_Opacity")

		let locationTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		locationTranslationXAnimation.duration = 0.100
		locationTranslationXAnimation.values = [0.000 as Float, 180.000 as Float]
		locationTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationTranslationXAnimation.timingFunctions = [linearTiming]
		locationTranslationXAnimation.beginTime = beginTime
		locationTranslationXAnimation.fillMode = fillMode
		locationTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["location"]?.layer.addAnimation(locationTranslationXAnimation, forKey:"closeOptions_TranslationX")
	}

	func removeCloseOptionsAnimation() {
		self.layer.removeAnimationForKey("CloseOptions")
		self.viewsByName["rating"]?.layer.removeAnimationForKey("closeOptions_Opacity")
		self.viewsByName["rating"]?.layer.removeAnimationForKey("closeOptions_TranslationY")
		self.viewsByName["gear"]?.layer.removeAnimationForKey("closeOptions_Rotation")
		self.viewsByName["gear"]?.layer.removeAnimationForKey("closeOptions_Opacity")
		self.viewsByName["location"]?.layer.removeAnimationForKey("closeOptions_Opacity")
		self.viewsByName["location"]?.layer.removeAnimationForKey("closeOptions_TranslationX")
	}

	// - MARK: initialHide

	func addInitialHideAnimation() {
		addInitialHideAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addInitialHideAnimation(completion: ((Bool) -> Void)?) {
		addInitialHideAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addInitialHideAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addInitialHideAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addInitialHideAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addInitialHideAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addInitialHideAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "InitialHide")
			self.animationCompletions[layer.animationForKey("InitialHide")!] = complete
		}

		let ratingOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		ratingOpacityAnimation.duration = 0.000
		ratingOpacityAnimation.values = [0.000 as Float]
		ratingOpacityAnimation.keyTimes = [0.000 as Float]
		ratingOpacityAnimation.beginTime = beginTime
		ratingOpacityAnimation.fillMode = fillMode
		ratingOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["rating"]?.layer.addAnimation(ratingOpacityAnimation, forKey:"initialHide_Opacity")

		let locationOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		locationOpacityAnimation.duration = 0.000
		locationOpacityAnimation.values = [0.000 as Float]
		locationOpacityAnimation.keyTimes = [0.000 as Float]
		locationOpacityAnimation.beginTime = beginTime
		locationOpacityAnimation.fillMode = fillMode
		locationOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["location"]?.layer.addAnimation(locationOpacityAnimation, forKey:"initialHide_Opacity")
	}

	func removeInitialHideAnimation() {
		self.layer.removeAnimationForKey("InitialHide")
		self.viewsByName["rating"]?.layer.removeAnimationForKey("initialHide_Opacity")
		self.viewsByName["location"]?.layer.removeAnimationForKey("initialHide_Opacity")
	}

	// - MARK: openOptions

	func addOpenOptionsAnimation() {
		addOpenOptionsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addOpenOptionsAnimation(completion: ((Bool) -> Void)?) {
		addOpenOptionsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addOpenOptionsAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addOpenOptionsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addOpenOptionsAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOpenOptionsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addOpenOptionsAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.100
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "OpenOptions")
			self.animationCompletions[layer.animationForKey("OpenOptions")!] = complete
		}

		let ratingOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		ratingOpacityAnimation.duration = 0.100
		ratingOpacityAnimation.values = [0.000 as Float, 1.000 as Float]
		ratingOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		ratingOpacityAnimation.timingFunctions = [linearTiming]
		ratingOpacityAnimation.beginTime = beginTime
		ratingOpacityAnimation.fillMode = fillMode
		ratingOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["rating"]?.layer.addAnimation(ratingOpacityAnimation, forKey:"openOptions_Opacity")

		let ratingTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		ratingTranslationYAnimation.duration = 0.100
		ratingTranslationYAnimation.values = [-200.000 as Float, 0.000 as Float]
		ratingTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		ratingTranslationYAnimation.timingFunctions = [linearTiming]
		ratingTranslationYAnimation.beginTime = beginTime
		ratingTranslationYAnimation.fillMode = fillMode
		ratingTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["rating"]?.layer.addAnimation(ratingTranslationYAnimation, forKey:"openOptions_TranslationY")

		let gearRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		gearRotationAnimation.duration = 0.100
		gearRotationAnimation.values = [6.281 as Float, 4.835 as Float]
		gearRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		gearRotationAnimation.timingFunctions = [linearTiming]
		gearRotationAnimation.beginTime = beginTime
		gearRotationAnimation.fillMode = fillMode
		gearRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["gear"]?.layer.addAnimation(gearRotationAnimation, forKey:"openOptions_Rotation")

		let gearOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		gearOpacityAnimation.duration = 0.100
		gearOpacityAnimation.values = [1.000 as Float, 0.600 as Float]
		gearOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		gearOpacityAnimation.timingFunctions = [linearTiming]
		gearOpacityAnimation.beginTime = beginTime
		gearOpacityAnimation.fillMode = fillMode
		gearOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["gear"]?.layer.addAnimation(gearOpacityAnimation, forKey:"openOptions_Opacity")

		let locationOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		locationOpacityAnimation.duration = 0.100
		locationOpacityAnimation.values = [0.000 as Float, 1.000 as Float]
		locationOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationOpacityAnimation.timingFunctions = [linearTiming]
		locationOpacityAnimation.beginTime = beginTime
		locationOpacityAnimation.fillMode = fillMode
		locationOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["location"]?.layer.addAnimation(locationOpacityAnimation, forKey:"openOptions_Opacity")

		let locationTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		locationTranslationXAnimation.duration = 0.100
		locationTranslationXAnimation.values = [180.000 as Float, 0.000 as Float]
		locationTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationTranslationXAnimation.timingFunctions = [linearTiming]
		locationTranslationXAnimation.beginTime = beginTime
		locationTranslationXAnimation.fillMode = fillMode
		locationTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["location"]?.layer.addAnimation(locationTranslationXAnimation, forKey:"openOptions_TranslationX")
	}

	func removeOpenOptionsAnimation() {
		self.layer.removeAnimationForKey("OpenOptions")
		self.viewsByName["rating"]?.layer.removeAnimationForKey("openOptions_Opacity")
		self.viewsByName["rating"]?.layer.removeAnimationForKey("openOptions_TranslationY")
		self.viewsByName["gear"]?.layer.removeAnimationForKey("openOptions_Rotation")
		self.viewsByName["gear"]?.layer.removeAnimationForKey("openOptions_Opacity")
		self.viewsByName["location"]?.layer.removeAnimationForKey("openOptions_Opacity")
		self.viewsByName["location"]?.layer.removeAnimationForKey("openOptions_TranslationX")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("InitialHide")
		self.layer.removeAnimationForKey("OpenOptions")
		self.layer.removeAnimationForKey("CloseOptions")
	}

	func actionRatingPressed(rating: UIButton) {
		gearOptionsViewDelegate?.ratingPressed(rating)
	}

	func actionLocationPressed(location: UIButton) {
		gearOptionsViewDelegate?.locationPressed(location)
	}

	func actionGearPressed(gear: UIButton) {
		gearOptionsViewDelegate?.gearPressed(gear)
	}
}